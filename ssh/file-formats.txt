Jared Chen
4/19/2022
CS338 Jeff Ondich

	id-rsa-homework content:
	-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----

id-rsa-homework.pub content:
ssh-rsa
AAAAB3NzaC1yc2EAAAADAQABAAABgQCukl/tQqBy2fk3DsFPdnj2YBAZDInhwQSphATUzk1o3C4uQxGCH3L
1hoSrg2ckJxI1ke8OqUhyQvd70K+sppXiWzByhpL9TcYpScmDDFavF0fzNlT1LvS9g2+Z1T5g/9JorQZd/
B0jLYHtxt3G56BJvhSip2dddPtReFrGJsQ67z7Z1oTZDkUkn/B8YXt1zxCZIoaGaCqnHj/I+/
E3qO6cB8gJbCLa6bMgPivpcSYotz1wIxnxJmieU2LykmO1US9MYqIo2i0Or5W7/6sLiWv0aZBih9wenyALG
LMCu75Eeab1hdBEhiIkyw623ttLuWUEJxDem07lwwnfU9YvEP0s5/44F4I6FET6fyUW+hTfME7BkBVJABPg
/KfJrkY7fzwvafKJyUhIiBfVT+OYQy0bV/
MB4cJMXTBUbxLu4HNTKGKjD5docK+YvhhREjPOv4LUkdaU7ec/
4o74PdJvdYoEJ77vM5UPcKDLqQCw84CtAk+yz69KMHZr8XdXnwKDeMk= jared.chen@Jareds-MacBook-
Pro.local

===== Private Key =====

To decode this file I opened the id-rsa-homework file and copied the contents into Lapo decoder for offset and length, and copied the contents into Holtstrom's decoder for raw hex values.

Expected items:
	Version: version is the version number, for compatibility with future
      revisions of this document.  It SHALL be 0 for this version of the
      document, unless multi-prime is used; in which case, it SHALL be
      1.
	Modulus: modulus is the RSA modulus n.
	publicExponent: publicExponent is the RSA public exponent e.
	privateExponent: privateExponent is the RSA private exponent d.
	prime1: prime1 is the prime factor p of n.
	prime2: prime2 is the prime factor q of n.
	exponent1: exponent1 is d mod (p - 1).
	exponent2: exponent2 is d mod (q - 1).
	coefficient: coefficient is the CRT coefficient q^(-1) mod p.
	otherPrimeInfos (this does not show up in our decoded version since our version number is 0)

Observed items
	== Version ==
		value: 0
		offset: 4
		length: 2+1
		DER interpretation: our highlighted bytes are 02 01. 02 in our first octet indicates a type integer. Our 01 is our length octet, and the 8th bit is a 0 indicating a short form, and the 1 indicates a length of 1. The 00 that follows is our 0 value.
	== Modulus ==
		value: 0x00ae925fed42a072d9f9370ec14f7678f66010190c89e1c104a98404d4ce4d68dc2e2e4311821f72f58684ab83672427123591ef0ea9487242f77bd0afaca695e25b30728692fd4dc62949c9830c56af1747f33654f52ef4bd836f99d53e60ffd268ad065dfc1d232d81edc6ddc6e7a049be14a2a7675d74fb51785ac626c43aef3ed9d684d90e45249ff07c617b75cf1099228686682aa71e3fc8fbf137a8ee9c07c8096c22dae9b3203e2be9712628b73d702319f126689e5362f29263b5512f4c62a228da2d0eaf95bbffab0b896bf469906287dc1e9f200b18b302bbbe4479a6f585d044862224cb0eb6dedb4bb965042710de9b4ee5c309df53d62f10fd2ce7fe3817823a1444fa7f2516fa14df304ec19015490013e0fca7c9ae463b7f3c2f69f289c948488817d54fe398432d1b57f301e1c24c5d30546f12eee073532862a30f976870af98be18511233cebf82d491d694ede73fe28ef83dd26f758a0427beef33950f70a0cba900b0f380ad024fb2cfaf4a30766bf177579f028378c9
		offset: 7
		length: 4 + 385
		DER interpretation: our highlighted bytes are 02  82 01 81. 02 indicates an integer. Then we convert our 82 from hex into binary to get 10000010. This means our length octet is in the definite long form, and there are two octets following that indicate length. 01 82 is our value length in hex.
	== publicExponent == 
		value: 65537
		offset: 396
		length: 2 + 3 
		DER interpretation: our highlighted bytes are 02 03. 02 indicates integer type. 03 indicates a short form length octet and the length of the data to follow is 3 octets long.
	== privateExponent ==
		value: 0x0b88ac41d6c7170f83c1b97dd82c31adc5870ac0a353811737c3fb35bc33ad1bef092b713ab1ad3cbf9880647c2a0d52ccab49aa24511f0b81a2729548c8f0da35c02bb0ec8143e435d224383e5673d70befebc50d35ff018e6f8f3061a0b30649d834b57cf4c7e037d767ee3b380e8510c3f8432b3727857b4a8264d926d9e5f8b717cf4b30002d7d4bbc4c0c862a1a24a3fd53600a8164243eb936a4c0ca9310888ce6d21eb89617294469760a596251f2d8bedc09f79b8e52d94806c2720c9bee4e033b49896769c1297b9bc9e2e788d0db0814ab14662c70ef589b020aa6bc9bd2f15186b5dab112a824a8149f4f7924337bf9a90390f6bcf644fde3e44b72e97138d59ef0f568e7ba671363049a0de21153118b476879b987b2852fc5496c86633b11fee285ca79ac3a0e248f555251718d54a006e4c5ba16de2dc68011932528d9f812c69fa1441f27166d84c5b9c751d05eec63841faf3eda64b1254ab1cc97d748b03ceb9d4ecd88b213a2cab7d43e245e83527dada65d1db0e97501
		offset: 401
		length: 4 + 384
		DER interpretation: our highlighted bytes are 02 82 01 80. 02 indicates integer. 82 is the same as in the modulus value, indicates a long definite length form where the next two octets contain the length. 01 and 80 represent the data length. 
		
	== prime1 ==
		value: 0x00e55afb5b0287a280c0ae1366b6863fdaba55e1ee90e8bccb60a561114a19f22d41ad7d12dcdfefe9bc6a190ef50c4239dac906fb87503a222668692a9efc0c4a9906452f022177c0f7e3e32c4915c822d372aa81b8aa11605cd19ea721a27617817c185ebb586e1be83f2b586e4801d4623fe15ddccb21dfa6ce451243fcc5cc5e9563d9bd41f9670e410a19106a43d49f156e65497d85bbfa2b2e9fe87861ec2f2cbbaf83398f305087b7713a5e94fabe71866815d0410d1b9660724d204db1
		offset: 789
		length: 3 + 193
		DER interpretation: 02 81 C1. 02 indicates integer. 81 converted to binary is 10000001. The first 1 bit indicates a definite long length octet, the 1 bit at the end indicates the number of following octets that indicates data length. thus C1 indicates data length in hex.
	== prime2 ==
		value: 0x00c2da21738b737b7fa4a88393204e193724dbea5f5f20105f4217cfaa1f11998dd4296f6d534f3464fab2bbe30ab5bf0e487c27701394e3162b5c9b54a4b8ef810a3733b0a3953507dc76e106d89a589d79a54328bcc685c4c8de01a3a595eef0c7f4407b636e39eca8b36d0b3385c86e796112a282ed37b875e246cf72aeba49bbffb7da773a9cfbe45b36b3c0dbd6e4551d20317d9573a58153f1e4de0b58d1e7d28c34eebeba4f1f58edfe5b586f643c0fdc9332808c56e79cedf2c4562a99
		offset: 985
		length: 3 + 193
		DER interpretation: 02 81 C1. 02 indicates integer. 81 converted to binary is 10000001. The first 1 bit indicates a definite long length octet, the 1 bit at the end indicates the number of following octets that indicates data length. thus C1 indicates data length in hex.
	== exponent1 ==
		value: 0x1a0344a8e0d39359b900c5508bf913faf1d155cba201d38fd989484616ba749e2f69c6dac1d4603889571b3a780e88e058f11dea9f413926b0667d2f09531aedc707500771dd6be0a5fce1c21f13ea5c10d15b8754f36cff19e7e86f9a3ffbd6d4a7c777cf15cb7f3ccb1556754393798c1f24a769a85c522a7010a36eb49796834fbc4070d7afbac1821cec14d18899efe5155d4585880a76e838e488104742eb62ce72ac9675a80c2a28631e34a5fefe648fd2f44e67625e33a302b3beab31
		offset: 1181
		length: 3 + 192
		DER interpretation: 02 81 C0. 02 indicates integer. 81 indicates definite long length octet with 1 octet that follows indicating length. C0 represents the length of the data in hex.
	== exponent2 ==
		value: 0x00ad469d88caf21f591b6c5fd56e5d053f6c9fc4849b6b4023f5fa86c99a67644e23e5d5193b84abeb40a5c13fde3e5170ba34ee3d54ac8a65249a6de78fb4860812b59459f89eaf5216540138bd56448785add95358cc9218b527f7fd373b6608e947e42fd5f427beb5271a4963c00cc5715b49df0adf3935e85f18e951eadfeec2285daf016836422a8892d4b724c8acb4a3fa0508d0e6cebf7b8f191ffca737c3181166e108eb558162ec01cde98ee56c240edb3785e9473f20e6d9848fbbc1
		offset: 1376
		length: 3 + 193
		DER interpretation: 02 81 C1. 02 indicates integer. 81 converted to binary is 10000001. The first 1 bit indicates a definite long length octet, the 1 bit at the end indicates the number of following octets that indicates data length. thus C1 indicates data length in hex.
	== coefficient ==
		value: 0x00ca24743b37f9174261c0720386ca3ff78aa0763ba9a8d788a43971bbb91799f0d43674f594bd204a5989c28ed3e18e9925482c48bf2effc3d540d6d020a582e7e940deb44ca3e0ffc909a198fcc8cdab1f6b3326ada2b753c0a5b3877cbdf78b643fe855f792c1b69ac2defb817873a443a44eac5ccc8dd3bfc426777afd473067633164fb40a9b3c81800ebce00cfd642852468417fa9ff3b068667ac284565309a01828d99625c502cf3cc314d6f123c8467a1716d331a33573014a6624fb3
		offset: 1572
		length: 3 + 193
		DER interpretation: 02 81 C1. 02 indicates integer. 81 converted to binary is 10000001. The first 1 bit indicates a definite long length octet, the 1 bit at the end indicates the number of following octets that indicates data length. thus C1 indicates data length in hex.

===== Public Key =====

To convert this public key into PEM-encoded  public key I used this command:

ssh-keygen -f id-rsa-homwork.pub -e -m pem

Then I copied the contents into Lapo decoder for offset and length, and copied the contents into Holtstrom's decoder for raw hex values

Expected items:
	modulus: modulus is the RSA modulus n.
	publicExponent: publicExponent is the RSA public exponent e.

Observed items
	== modulus ==
		value: 0x00ae925fed42a072d9f9370ec14f7678f66010190c89e1c104a98404d4ce4d68dc2e2e4311821f72f58684ab83672427123591ef0ea9487242f77bd0afaca695e25b30728692fd4dc62949c9830c56af1747f33654f52ef4bd836f99d53e60ffd268ad065dfc1d232d81edc6ddc6e7a049be14a2a7675d74fb51785ac626c43aef3ed9d684d90e45249ff07c617b75cf1099228686682aa71e3fc8fbf137a8ee9c07c8096c22dae9b3203e2be9712628b73d702319f126689e5362f29263b5512f4c62a228da2d0eaf95bbffab0b896bf469906287dc1e9f200b18b302bbbe4479a6f585d044862224cb0eb6dedb4bb965042710de9b4ee5c309df53d62f10fd2ce7fe3817823a1444fa7f2516fa14df304ec19015490013e0fca7c9ae463b7f3c2f69f289c948488817d54fe398432d1b57f301e1c24c5d30546f12eee073532862a30f976870af98be18511233cebf82d491d694ede73fe28ef83dd26f758a0427beef33950f70a0cba900b0f380ad024fb2cfaf4a30766bf177579f028378c9
		offset: 4
		length: 4 + 385
		DER interpretation: our highlighted bytes are 02  82 01 81. 02 indicates an integer. Then we convert our 82 from hex into binary to get 10000010. This means our length octet is in the definite long form, and there are two octets following that indicate length. 01 82 is our value length in hex.
	
	== publicExponent ==
		value: 65537
		offset: 393
		length: 2 + 3
		DER interpretation: our highlighted bytes are 02 03. 02 indicates integer type. 03 indicates a short form length octet and the length of the data to follow is 3 octets long.

===== Sanity Check =====
P * q should == m
(In decimal)
P = 1834587393700671540420455265404318091394163035673273499580827373352186346484370967134940256476071559383998623008783568421472251592202499510493344595004423960347368187068828180568745809345755068157950670842341423805056401858477206467727533729583459766441589613287788065006791466294596813971574548902352796566422559230040794891757531836774268785743215732711380434144588201986417510991198696705029648734995077992950646870407203644068630825943716238733599678274087577
Q = 2159445959739015791469834880134304271453158259577312525029728942843249081832029439562738405334749947950223385107110260146499733511125759916371292293923407600965819962099666856303351149472207373087296714372181485477177896630163298333297581915871940838929653522898840707113136095004494561983321106459980334771712788556028999852052784335570070623536795507476250885543502225305067428975641502600498555094944209823756975956292485589367337549908222854653366170464308657

P * q = 3961692335115046268323540627707899116595581975684187374455721143218867886690362510872115559368518115831853715847161515454069685520878323156024128602119820384816461208565041288216063716368905016271538266241268412524306795038750159878217241938016398459198250342759432528335641234614236922540196173320406410320336474064940709008301229956429097692237684400031311669197628681182089540804161778658869230340523264753285652114374205015798900389336145452934980203472599838856814621799679232863295820825183703080028509771214953324731551497603644864493898409002986329569109682545645508294513689278112493860857792632983913237931559270484800297058510313009925490132882590477926583540953619245556774789016051083788805572616872467038728245474928777889136222266188932288103142356744574716828047756794965891231689663137511301939119068146503512893494416526840119070411258425498165704183957331570502863389488333007702931546615824143770777254089

M = 3961692335115046268323540627707899116595581975684187374455721143218867886690362510872115559368518115831853715847161515454069685520878323156024128602119820384816461208565041288216063716368905016271538266241268412524306795038750159878217241938016398459198250342759432528335641234614236922540196173320406410320336474064940709008301229956429097692237684400031311669197628681182089540804161778658869230340523264753285652114374205015798900389336145452934980203472599838856814621799679232863295820825183703080028509771214953324731551497603644864493898409002986329569109682545645508294513689278112493860857792632983913237931559270484800297058510313009925490132882590477926583540953619245556774789016051083788805572616872467038728245474928777889136222266188932288103142356744574716828047756794965891231689663137511301939119068146503512893494416526840119070411258425498165704183957331570502863389488333007702931546615824143770777254089

In other words
 
P * q == m

Using p and q we can found lambda n which comes out to be: 


Our e is from our pubic key, and our d is from our private key, knowing lambda(n) we do the following:
E * d % lambda(n)

This comes out to 1. Therefore the private and public key have the relationship we expect them to have.










